name: Run Parallel Benchmarks in multiple clients

on:
  workflow_dispatch:
    inputs:
      test:
        description: 'Path to test file'
        default: 'tests/'
      warmup:
        description: 'Name of the warm up file'
        default: 'warmup/warmup-1000bl-16wi-24tx.txt'
        type: choice
        options:
          - ''
          - warmup/warmup-100bl-16wi-32tx.txt
          - warmup/warmup-1000bl-16wi-24tx.txt
          - warmup/warmup-1000bl-16wi-1000tx.txt
      client:
        description: 'Comma-separated list of client names'
        default: 'nethermind,geth,reth,besu,erigon'
        required: true
      runs:
        description: 'Number of runs for the application'
        default: 15
      images:
        description: 'JSON map of images for the clients'
        default: '{"nethermind":"default","geth":"default","reth":"default","erigon":"default","besu":"default"}'
      opcodes_warmup_count:
        description: 'Number of opcode‐warmup iterations'
        default: 2
      filter:
        description: 'Comma-separated include-only filename patterns'
        default: ''
      txt_report:
        description: 'Mark as true to generate txt report'
        default: 'false'

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with: { python-version: 3.x }

      - name: Build a client-only matrix
        id: set-matrix
        run: |
          clients="${{ github.event.inputs.client }}"
          IFS=',' read -ra client_array <<< "$clients"
          matrix_items=()
          for client in "${client_array[@]}"; do
            matrix_items+=("{\"client\":\"$client\"}")
          done
          matrix="{\"include\":[${matrix_items[*]}]}"
          echo "::set-output name=matrix::$matrix"

  build:
    needs: set-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.set-matrix.outputs.matrix) }}

    env:
      DOTNET_INSTALL_DIR: "~/.dotnet"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with: { python-version: '3.10' }

      - uses: actions/setup-dotnet@v4
        with: { dotnet-version: '9.0.x' }

      - name: Make run.sh executable
        run: chmod +x ./run.sh

      - name: Run benchmarks for ${{ matrix.client }}
        run: |
          ./run.sh \
            -t "${{ github.event.inputs.test }}" \
            -w "${{ github.event.inputs.warmup }}" \
            -c "${{ matrix.client }}" \
            -r "${{ github.event.inputs.runs }}" \
            -i '${{ github.event.inputs.images }}' \
            -o "${{ github.event.inputs.opcodes_warmup_count }}" \
            -f "${{ github.event.inputs.filter }}"

      - name: Zip everything up
        run: |
          zip -r results-${{ matrix.client }}.zip results warmupresults logs reports

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: results-${{ matrix.client }}
          path: results-${{ matrix.client }}.zip
          
  combine-results:
    needs: build
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.10' }

      - uses: actions/download-artifact@v4
        with:
          path: combined-results
          merge-multiple: true

      - name: Extract each client ZIP into its own folder
        run: |
          mkdir -p extracted
          for zip in combined-results/*.zip; do
            client=$(basename "$zip" .zip)
            mkdir -p "extracted/$client"
            unzip -q "$zip" -d "extracted/$client"
          done

      - name: Consolidate all client-results into merged-results
        run: |
          mkdir -p merged-results
          # Copy every client’s results/ into merged-results/
          for d in extracted/*; do
            if [ -d "$d/results" ]; then
              cp -r "$d/results/." merged-results/
            fi
          done

      - name: Run table & HTML reports over merged-results
        run: |
          python3 report_tables.py \
            --resultsPath merged-results \
            --clients "${{ github.event.inputs.client }}" \
            --testsPath "${{ github.event.inputs.test }}" \
            --runs "${{ github.event.inputs.runs }}" \
            --images '${{ github.event.inputs.images }}'

          python3 report_html.py \
            --resultsPath merged-results \
            --clients "${{ github.event.inputs.client }}" \
            --testsPath "${{ github.event.inputs.test }}" \
            --runs "${{ github.event.inputs.runs }}" \
            --images '${{ github.event.inputs.images }}'

      - name: Optionally generate TXT report
        if: ${{ github.event.inputs.txt_report == 'true' }}
        run: |
          python3 report_txt.py \
            --resultsPath merged-results \
            --clients "${{ github.event.inputs.client }}" \
            --testsPath "${{ github.event.inputs.test }}"

      - name: Zip final reports
        run: zip -r reports.zip reports

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: reports.zip

  populate-db:
    needs: combine-results
    runs-on: ubuntu-latest
    env:
      DB_HOST: ${{ secrets.PERFNET_0_DB_HOST }}
      DB_PORT: ${{ secrets.PERFNET_0_DB_PORT || '5432' }}
      DB_USER: ${{ secrets.PERFNET_0_DB_USER }}
      DB_PASSWORD: ${{ secrets.PERFNET_0_DB_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install python dependencies for submodule
        run: |
          pip install -r requirements.txt

      - uses: actions/download-artifact@v4
        with:
          path: combined-results # Download artifacts from previous jobs
          merge-multiple: true

      - name: Extract all result files
        run: |
          mkdir -p extracted-results
          find combined-results -name '*.zip' -exec unzip -o {} -d extracted-results \;

      - name: Populate Benchmark DB
        run: |
          python fill_postgres_db.py \
            --db-host ${{ env.DB_HOST }} \
            --db-port ${{ env.DB_PORT }} \
            --db-user ${{ env.DB_USER }} \
            --db-name monitoring \
            --table-name gas_benchmarks_ci \
            --db-password "${{ env.DB_PASSWORD }}" \
            --log-level DEBUG \
            --reports-dir 'extracted-results/reports/'
